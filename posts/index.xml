<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Brian Stadnicki</title><link>https://brianstadnicki.github.io/posts/</link><description>Recent content in Posts on Brian Stadnicki</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 22 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://brianstadnicki.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Fiverr: extend Iveco activator to 2030</title><link>https://brianstadnicki.github.io/posts/fiverr-extend-iveco-activator-to-2030/</link><pubDate>Fri, 22 Oct 2021 00:00:00 +0000</pubDate><guid>https://brianstadnicki.github.io/posts/fiverr-extend-iveco-activator-to-2030/</guid><description>A customer on Fiverr sent me a copy of the Iveco easy activator v1.01. This looks to be a key generator to program Iveco trucks. The customer has requested that I add the years up to 2030 to it, as the tool only works from 2017 to 2020. Nice to see future proofing, even if I really doubt the key algorithm won&amp;rsquo;t change in that time.
Running it First of all, let&amp;rsquo;s run it and see what we&amp;rsquo;re working with.</description></item><item><title>My startup: Tradesmen Bookings</title><link>https://brianstadnicki.github.io/posts/tradesmen-bookings-begin/</link><pubDate>Fri, 08 Oct 2021 00:00:00 +0000</pubDate><guid>https://brianstadnicki.github.io/posts/tradesmen-bookings-begin/</guid><description>A project I started 4 months ago is tradesmen bookings. Property management services currently manage their tradesmen through calling, which is expensive, so I decided to write a SaaS tool that would optimise this. No calling, just post a job and the tradesmen apply.
Development It&amp;rsquo;s written in ruby on rails, which was honestly quite painful to get started on. I&amp;rsquo;m not typically involved in web development, so it was quite a giant learning curve, felt like the learning curve of Eve.</description></item><item><title>Rust Reversing 1: Hello, world!</title><link>https://brianstadnicki.github.io/posts/rust-reversing-01/</link><pubDate>Sun, 03 Oct 2021 00:00:00 +0000</pubDate><guid>https://brianstadnicki.github.io/posts/rust-reversing-01/</guid><description>There&amp;rsquo;s plenty of decompilers for most compiled languages, but what about rust? I couldn&amp;rsquo;t find one, so let&amp;rsquo;s try to understand what the resulting code looks like, in the hopes of creating a decompiler. Might help out somebody going against an odd malware author who&amp;rsquo;s decided that rust makes sense (it doesn&amp;rsquo;t).
Fair warning, this is my first dive into assembly reverse engineering since I did basic crackmes a few years ago, so be prepared for vagueness while I&amp;rsquo;m trying to learn.</description></item></channel></rss>