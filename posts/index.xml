<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Brian Stadnicki</title><link>https://brianstadnicki.github.io/posts/</link><description>Recent content in Posts on Brian Stadnicki</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 05 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://brianstadnicki.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Analysis of FreeBitco.in Next Roll Prediction</title><link>https://brianstadnicki.github.io/posts/malware-freebitcoin-next-roll-prediction/</link><pubDate>Fri, 05 Nov 2021 00:00:00 +0000</pubDate><guid>https://brianstadnicki.github.io/posts/malware-freebitcoin-next-roll-prediction/</guid><description>Malware obtained from any.run. It&amp;rsquo;s a bitcoin scam executable.
Property Value MD5 afb30fed336e9b1e5e8ea5d941691b2a SHA1 afeb330ea75da11608bc4f32d3490ed38cfd4c11 SHA256 16b4664969ce27b9914dc9d41b5baa16a341e00f442527efffd478a73a014fa1 2 EXEs dropped Running procmon when running the malware shows that 2 possibly interesting executables are created: C:\Users\IEUser\AppData\Roaming\Microsoft\gons.exe and C:\Users\IEUser\AppData\Roaming\Microsoft\temp5789e.exe. Both of these dropped executables are .NET assemblies, so they should be trivial to reverse.
gons.exe Opening gons in dnSpy shows that this executable is responsible for the GUI, and I didn&amp;rsquo;t notice any malicious behaviour initially.</description></item><item><title>Failed to modify a data converter</title><link>https://brianstadnicki.github.io/posts/fiverr-data-converter-modification/</link><pubDate>Tue, 26 Oct 2021 00:00:00 +0000</pubDate><guid>https://brianstadnicki.github.io/posts/fiverr-data-converter-modification/</guid><description>An interesting Fiverr project I got recently is modifying the EXFO Toolbox data converter to allow excel files. This toolbox is used for fibre optic measurements. The client wants to be able to change a few values in the measurements which can&amp;rsquo;t be done using the tool.
Overview It&amp;rsquo;s quite a simple part of the program, just select the 2 files to merge and tada. Issue is, it merges OLTS/OLTS2 files, not the excel file requested.</description></item><item><title>Marquire's CrackMe_V3_Marquire</title><link>https://brianstadnicki.github.io/posts/crackmes-margquier-crackme-v3-marquire/</link><pubDate>Sun, 24 Oct 2021 00:00:00 +0000</pubDate><guid>https://brianstadnicki.github.io/posts/crackmes-margquier-crackme-v3-marquire/</guid><description>Let&amp;rsquo;s start off the crackmes series with a basic one: Marquire&amp;rsquo;s CrackMe_V3_Marquire .
Language: C/C++ Platform: Windows Difficulty: 1.3 Quality: 4.3 Arch: x86 Initial run It&amp;rsquo;s very standard, it just asks for the key and tells us if it&amp;rsquo;s right or wrong.
Initial analysis It&amp;rsquo;s quite clear what&amp;rsquo;s going on. Ask for the input, do some simple logic, say if right or wrong and exit.</description></item><item><title>Extending an Iveco activator to 2030</title><link>https://brianstadnicki.github.io/posts/fiverr-extend-iveco-activator-to-2030/</link><pubDate>Fri, 22 Oct 2021 00:00:00 +0000</pubDate><guid>https://brianstadnicki.github.io/posts/fiverr-extend-iveco-activator-to-2030/</guid><description>A customer on Fiverr sent me a copy of the Iveco easy activator v1.01. This looks to be a key generator to program Iveco trucks. The customer has requested that I add the years up to 2030 to it, as the tool only works from 2017 to 2020. Nice to see future proofing, even if I really doubt the key algorithm won&amp;rsquo;t change in that time.
Running it First of all, let&amp;rsquo;s run it and see what we&amp;rsquo;re working with.</description></item><item><title>My startup: Tradesmen Bookings</title><link>https://brianstadnicki.github.io/posts/tradesmen-bookings-begin/</link><pubDate>Fri, 08 Oct 2021 00:00:00 +0000</pubDate><guid>https://brianstadnicki.github.io/posts/tradesmen-bookings-begin/</guid><description>A project I started 4 months ago is tradesmen bookings. Property management services currently manage their tradesmen through calling, which is expensive, so I decided to write a SaaS tool that would optimise this. No calling, just post a job and the tradesmen apply.
Development It&amp;rsquo;s written in ruby on rails, which was honestly quite painful to get started on. I&amp;rsquo;m not typically involved in web development, so it was quite a giant learning curve, felt like the learning curve of Eve.</description></item><item><title>Rust Reversing 1: Hello, world!</title><link>https://brianstadnicki.github.io/posts/rust-reversing-01/</link><pubDate>Sun, 03 Oct 2021 00:00:00 +0000</pubDate><guid>https://brianstadnicki.github.io/posts/rust-reversing-01/</guid><description>There&amp;rsquo;s plenty of decompilers for most compiled languages, but what about rust? I couldn&amp;rsquo;t find one, so let&amp;rsquo;s try to understand what the resulting code looks like, in the hopes of creating a decompiler. Might help out somebody going against an odd malware author who&amp;rsquo;s decided that rust makes sense (it doesn&amp;rsquo;t).
Fair warning, this is my first dive into assembly reverse engineering since I did basic crackmes a few years ago, so be prepared for vagueness while I&amp;rsquo;m trying to learn.</description></item></channel></rss>