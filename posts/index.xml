<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>All Posts - Brian Stadnicki</title><link>https://brianstadnicki.github.io/posts/</link><description>All Posts | Brian Stadnicki</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 21 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://brianstadnicki.github.io/posts/" rel="self" type="application/rss+xml"/><item><title>Overview of malware authors</title><link>https://brianstadnicki.github.io/posts/malware-authors/</link><pubDate>Fri, 21 Jan 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://brianstadnicki.github.io/posts/malware-authors/</guid><description>There is a huge amount of malware created and found every day, easily ranging from 1k to 3k every day just on a public resource such as malshare.
So there is a big question: Who and why is creating so much malware?
Types I believe there&amp;rsquo;s 2 main bands of malware authors: the kids, and the professionals.
Kids Kids can be taken both figuratively and literally. New &amp;ldquo;hackers&amp;rdquo; are often called Script Kiddies, referring to their main ability being to copy and paste public code and trying to use it, often failing badly.</description></item><item><title>Gitlab RCE Stealth Shellbot</title><link>https://brianstadnicki.github.io/posts/malware-gitlab-perlbot/</link><pubDate>Thu, 13 Jan 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://brianstadnicki.github.io/posts/malware-gitlab-perlbot/</guid><description>Last year, a major RCE was found in GitLab, CVE-2021-22205, where GitLab versions &amp;gt;= 11.9 and &amp;lt;13.10.3 were affected due to improper image validation before passing it to a file parser.
Malicious image The DjVu image is considered a legacy format, so not much attention has been paid to it. The GitLab RCE depends on a vulnerability in ExifTool, CVE-2021-22204, where improper parsing of annotations, including a dangerous eval to add quotes to a string, caused an RCE.</description></item><item><title>SBIDIOT IoT Malware: miner edition</title><link>https://brianstadnicki.github.io/posts/malware-sbidiot-dec2021/</link><pubDate>Sun, 02 Jan 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://brianstadnicki.github.io/posts/malware-sbidiot-dec2021/</guid><description><![CDATA[The SBIDIOT IoT malware was observed earlier this year in april. Recently I spotted a sample with a cryptominer added on, so let&rsquo;s see what&rsquo;s changed.
The botnet&rsquo;s main use is for DDOS attacks on game servers.
Overview Author I took a look at one of the past versions of this malware:
3e948a7995faac6975af3c8c937c66e6b5733cb69dab5d2b87ba4c22e23ef136 It appears that the author could be selfrepnetis, who&rsquo;s instagram is likely @selfrepnetis and @selfrepnetis_.
Based on the instagram, it appears that this botnet is likely being used for RebirthRebornV2, RebirthVPN, RebirthReboot1.]]></description></item><item><title>Face Brain: Password stealer with vm detection</title><link>https://brianstadnicki.github.io/posts/malware-face-brain-credential-stealer/</link><pubDate>Tue, 21 Dec 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://brianstadnicki.github.io/posts/malware-face-brain-credential-stealer/</guid><description>Today I&amp;rsquo;m taking a look at a password stealer filled with obfuscation and some virtual machine detection. The sample can be obtained from malshare, with an automated analysis report on joesandbox.
Property Value File Type Portable Executable 64 File Size 3.69 MB CompanyName Say celebrate Date FileDescription Dress Suffer fuel basic FileVersion 6.4.14.15 LegalCopyright Pine Shit (c) 2005 ProductName Almost publication MD5 3c7c6d236721ea4cef0f904ebde6f575 SHA1 d82cd631a49a175caace0fb209f7b9da16e29655 SHA256 ed107d31ac4a6e8f665986e3326cc2c4551fd00ba26f5414faa8edd0f7c20061 Initial overview The sandbox report provides us with a lot of useful initial information.</description></item><item><title>Writing a self-modifying x86 factorial program</title><link>https://brianstadnicki.github.io/posts/asm-self-modifying-factorial/</link><pubDate>Wed, 15 Dec 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://brianstadnicki.github.io/posts/asm-self-modifying-factorial/</guid><description>Self-modifying programs seem to be viewed as something magical, but they&amp;rsquo;re quite simple.
To demonstrate this, I&amp;rsquo;ll be writing a self-modifying factorial program in x86, specifically in nasm.
Basic factorial To write a self-modifying factorial program, we first need a normal factorial program.
factorial: push ebp mov ebx, eax factorial_start: sub ebx, 1 cmp ebx, 0 je factorial_end mul ebx jmp factorial_start factorial_end: pop ebp ret This is quite simple, if it needs explanation then this isn&amp;rsquo;t for you.</description></item><item><title>.NET dmp forensics challenge</title><link>https://brianstadnicki.github.io/posts/ctf-metactf-cybergames-2021-step-into-net/</link><pubDate>Wed, 08 Dec 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://brianstadnicki.github.io/posts/ctf-metactf-cybergames-2021-step-into-net/</guid><description><![CDATA[This is a challenge from MetaCTF CyberGames 2021. It included .NET dump memory forensics, which doesn&rsquo;t look to be very common knowledge on how to do, so hopefully this writeup can help with that.
Step into the NET For the grand finale, it&rsquo;s time to put all of your analysis skills together. You&rsquo;re going to face a little bit of Crypto &amp; Reverse Engineering and a whole lot of Forensics.]]></description></item><item><title>Success in MetaCTF CyberGames 2021</title><link>https://brianstadnicki.github.io/posts/ctf-metactf-cybergames-2021/</link><pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://brianstadnicki.github.io/posts/ctf-metactf-cybergames-2021/</guid><description>Me and my friend from school competed in a great CTF challenge this weekend. It ran from 03/12/21 8pm to 05/12/21 8pm, in which time we solved 32 challenges, gathering 6925 points. We came 41st in the students leaderboard and 96th overall, that&amp;rsquo;s very good for our first CTF.
I learnt a lot from this CTF, especially about what I don&amp;rsquo;t know yet.
As you can see, Reconnaissance and Forensics were our strongest categories.</description></item><item><title>Embedded objects in OLE &amp; OLE2 using links</title><link>https://brianstadnicki.github.io/posts/malware-ole-ole2-embed-links/</link><pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://brianstadnicki.github.io/posts/malware-ole-ole2-embed-links/</guid><description>.docx and .doc documents can contain embedded objects through a variety of methods, here we look at a sample using OLE linking and embedding.
Sample obtained from any.run
Property Value File Type Rich Text Format File Size 8.00 KB FileTitle OriginalRTF.bak.rtf MD5 00f576ddeaf60756bfe671858434931c SHA1 44c0d585482755dd945cea10458b82ca6cb620ff SHA256 23c8f0fb9912538eee0bde49b2007e7e0f4efbd8bca69ddb9c05fafcee6f03ab Initial static analysis {\rt{\object\objemb\objw1\objh1{\*\objclass Package}{\*\objdata 01050000020000000800.</description></item><item><title>Docsend Payment Audistore phisher</title><link>https://brianstadnicki.github.io/posts/malware-docsend-payment-phisher-audi/</link><pubDate>Tue, 30 Nov 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://brianstadnicki.github.io/posts/malware-docsend-payment-phisher-audi/</guid><description><![CDATA[This phishing sample was delivered through docsend and relies on the user opening the downloaded html file and logging into microsoft. Sample collected from JOESandbox.
MD5: 7d6375abf1cff57c9d7da133cfaf0782
Loader &lt;!-- TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbn ... --&gt;&lt;script type=&#39;text/javascript&#39;&gt;document.write(&#39;\u003C\u0021\u002D\u002D\u0058\u0056\u005A\u0054\u0074\u006D...&#39;);&lt;/script&gt;&lt;!-- TgZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3R ... G1vZG8gdHlwaSwgcXVpIG51bmMgbm9iaXMgdmlkZW50dXIgcGFydW0gY2xhcmksIGZpYW50IHNvbGxlbW5lcyBpbiBmdXR1cnVtLg #### #### --&gt; There&rsquo;s a large comment full of likely random data to help evade detection, and a call to document.write, which writes text to the document stream.
Packed First of all, it appears the embedded html page was packed using Proteger HTML, and their license expires on Sun Dec 05 2021 01:29:00 GMT, that&rsquo;s in just 5 days of this post being published.]]></description></item><item><title>HTB forensics challenge: oBfsC4t10n #93</title><link>https://brianstadnicki.github.io/posts/htb-challenge-93/</link><pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://brianstadnicki.github.io/posts/htb-challenge-93/</guid><description>Introduction I started analysing this from finding it on the malware sandbox any.run, only at the end do I notice that it&amp;rsquo;s a Hack The Box challenge.
Sample This sample is from any.run.
Property Value File Type Microsoft Excel 97-2003 Worksheet File Size 35.6 KB MD5 b54c993e941836bf2c9c69948b30bcf0 SHA1 a3e6234b5310a3918b9e01c08badf3eb5f44a4b8 SHA256 3861795ece849d6b417a3c9870a7e0a0eccd27f74e706b9242d94d5e8885b705 VBA Extraction Using olevba, we can view the vba code inside.</description></item></channel></rss>