<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>x86 on Brian Stadnicki</title><link>https://brianstadnicki.github.io/tags/x86/</link><description>Recent content in x86 on Brian Stadnicki</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 21 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://brianstadnicki.github.io/tags/x86/index.xml" rel="self" type="application/rss+xml"/><item><title>Analysis of Kasperky Trial Reset V2</title><link>https://brianstadnicki.github.io/posts/malware-kaspersky-trial-reset-v2/</link><pubDate>Sun, 21 Nov 2021 00:00:00 +0000</pubDate><guid>https://brianstadnicki.github.io/posts/malware-kaspersky-trial-reset-v2/</guid><description>I&amp;rsquo;ve picked this sample from any.run. It appears to be a trojan tricking people who can&amp;rsquo;t afford Kasperky with a RAT, with the kasperky logo to match.
Property Value File Type Portable Executable 32 File Size 862.00 KB FileTitle Kasperky Trial Reset FileDescription Protected with AzeFuscator Extended FileVersion 1,0,0,0 ProductName Protectd with AzeFuscator Extended MD5 d56e6af4d2f9170cf312f110f3fa8511 SHA1 1e5be78908b38b9c6e7d6593888e355ee270a6c2 SHA256 aef7cef69eb5e31673d034239aff208061fa61e8b5c8355b933e14f5818e4433 Loader analysis The loader is very simple, just some misc methods along with a call to CreateProcessA, and the imports fopen, fwrite and fclose, which are used for writing the unpacked executable to the disk.</description></item><item><title>Cracking rendariaka's packedcrackmev1.0</title><link>https://brianstadnicki.github.io/posts/crackmes-rendariaka-packedcrackmev1-0/</link><pubDate>Thu, 11 Nov 2021 00:00:00 +0000</pubDate><guid>https://brianstadnicki.github.io/posts/crackmes-rendariaka-packedcrackmev1-0/</guid><description>This crackme is packed unlike the previous ones. We&amp;rsquo;ll be unpacking it manually as an exercise. The crackme is rendariaka&amp;rsquo;s packedcrackmev1.0
Property Value Language C/C++ Platform Windows Difficulty 2.0 Quality 4.0 Arch x86 First run Enter serial number: Entering the incorrect serial causes it to exit.
Initial static analysis As by the name suggests, this crackme is packed.</description></item><item><title>Analysis of vzlom_vk (Failed)</title><link>https://brianstadnicki.github.io/posts/malware-vzlom-vk/</link><pubDate>Tue, 09 Nov 2021 00:00:00 +0000</pubDate><guid>https://brianstadnicki.github.io/posts/malware-vzlom-vk/</guid><description>Malware obtained from any.run. It&amp;rsquo;s an unknown executable which unpacks itself, fails to run update.exe and prints out some russian.
Property Value MD5 18b065e37c55a00d7a023f5cef02bde4 SHA1 fb6e6596c617f932cd9c7740b29ed6f5dda8a88c SHA256 bc4896abbf0726df8b9ef9134d584bbe1b649f59e453bbc327f8cd5b5b5a0651 File Type Portable Executable 32 File Info Microsoft Visual C++ 8 First run When run, it prints out the following text:</description></item><item><title>Cracking Marquire's CrackMe_V4_Marquire</title><link>https://brianstadnicki.github.io/posts/crackmes-marquier-crackme-v4-marquire/</link><pubDate>Sun, 07 Nov 2021 00:00:00 +0000</pubDate><guid>https://brianstadnicki.github.io/posts/crackmes-marquier-crackme-v4-marquire/</guid><description>This crackme will be a bit more difficult than the last one: Marquire&amp;rsquo;s CrackMe_V4_Marquire
Property Value Language C/C++ Platform Windows Difficulty 2.7 Quality 4.0 Arch x86 Initial run ## The goal of this crackme is to find the key! ## Enter the key : Asks for a key, exits if it&amp;rsquo;s false, and gives a message if it&amp;rsquo;s correct.</description></item><item><title>Analysis of FreeBitco.in Next Roll Prediction</title><link>https://brianstadnicki.github.io/posts/malware-freebitcoin-next-roll-prediction/</link><pubDate>Fri, 05 Nov 2021 00:00:00 +0000</pubDate><guid>https://brianstadnicki.github.io/posts/malware-freebitcoin-next-roll-prediction/</guid><description>Malware obtained from any.run. It&amp;rsquo;s a bitcoin scam executable.
Property Value MD5 afb30fed336e9b1e5e8ea5d941691b2a SHA1 afeb330ea75da11608bc4f32d3490ed38cfd4c11 SHA256 16b4664969ce27b9914dc9d41b5baa16a341e00f442527efffd478a73a014fa1 2 EXEs dropped Running procmon when running the malware shows that 2 possibly interesting executables are created: C:\Users\IEUser\AppData\Roaming\Microsoft\gons.exe and C:\Users\IEUser\AppData\Roaming\Microsoft\temp5789e.exe. Both of these dropped executables are .NET assemblies, so they should be trivial to reverse.
gons.exe Opening gons in dnSpy shows that this executable is responsible for the GUI, and I didn&amp;rsquo;t notice any malicious behaviour initially.</description></item><item><title>Cracking Marquire's CrackMe_V3_Marquire</title><link>https://brianstadnicki.github.io/posts/crackmes-marquier-crackme-v3-marquire/</link><pubDate>Sun, 24 Oct 2021 00:00:00 +0000</pubDate><guid>https://brianstadnicki.github.io/posts/crackmes-marquier-crackme-v3-marquire/</guid><description>Let&amp;rsquo;s start off the crackmes series with a basic one: Marquire&amp;rsquo;s CrackMe_V3_Marquire .
Property Value Language C/C++ Platform Windows Difficulty 1.3 Quality 4.3 Arch x86 Initial run It&amp;rsquo;s very standard, it just asks for the key and tells us if it&amp;rsquo;s right or wrong.
Initial analysis It&amp;rsquo;s quite clear what&amp;rsquo;s going on.</description></item></channel></rss>