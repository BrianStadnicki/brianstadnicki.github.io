<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>reverse engineering on Brian Stadnicki</title><link>https://brianstadnicki.github.io/tags/reverse-engineering/</link><description>Recent content in reverse engineering on Brian Stadnicki</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 24 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://brianstadnicki.github.io/tags/reverse-engineering/index.xml" rel="self" type="application/rss+xml"/><item><title>Crackmes: Marquire's CrackMe_V3_Marquire</title><link>https://brianstadnicki.github.io/posts/crackmes-margquier-crackme-v3-marquire/</link><pubDate>Sun, 24 Oct 2021 00:00:00 +0000</pubDate><guid>https://brianstadnicki.github.io/posts/crackmes-margquier-crackme-v3-marquire/</guid><description>Let&amp;rsquo;s start off the crackmes series with a basic one: Marquire&amp;rsquo;s CrackMe_V3_Marquire .
Language: C/C++ Platform: Windows Difficulty: 1.3 Quality: 4.3 Arch: x86 Initial run It&amp;rsquo;s very standard, it just asks for the key and tells us if it&amp;rsquo;s right or wrong.
Initial analysis It&amp;rsquo;s quite clear what&amp;rsquo;s going on. Ask for the input, do some simple logic, say if right or wrong and exit.</description></item><item><title>Fiverr: extend Iveco activator to 2030</title><link>https://brianstadnicki.github.io/posts/fiverr-extend-iveco-activator-to-2030/</link><pubDate>Fri, 22 Oct 2021 00:00:00 +0000</pubDate><guid>https://brianstadnicki.github.io/posts/fiverr-extend-iveco-activator-to-2030/</guid><description>A customer on Fiverr sent me a copy of the Iveco easy activator v1.01. This looks to be a key generator to program Iveco trucks. The customer has requested that I add the years up to 2030 to it, as the tool only works from 2017 to 2020. Nice to see future proofing, even if I really doubt the key algorithm won&amp;rsquo;t change in that time.
Running it First of all, let&amp;rsquo;s run it and see what we&amp;rsquo;re working with.</description></item><item><title>Rust Reversing 1: Hello, world!</title><link>https://brianstadnicki.github.io/posts/rust-reversing-01/</link><pubDate>Sun, 03 Oct 2021 00:00:00 +0000</pubDate><guid>https://brianstadnicki.github.io/posts/rust-reversing-01/</guid><description>There&amp;rsquo;s plenty of decompilers for most compiled languages, but what about rust? I couldn&amp;rsquo;t find one, so let&amp;rsquo;s try to understand what the resulting code looks like, in the hopes of creating a decompiler. Might help out somebody going against an odd malware author who&amp;rsquo;s decided that rust makes sense (it doesn&amp;rsquo;t).
Fair warning, this is my first dive into assembly reverse engineering since I did basic crackmes a few years ago, so be prepared for vagueness while I&amp;rsquo;m trying to learn.</description></item></channel></rss>