<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>rust - Tag - Brian Stadnicki</title><link>https://brianstadnicki.github.io/tags/rust/</link><description>rust - Tag - Brian Stadnicki</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 03 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://brianstadnicki.github.io/tags/rust/" rel="self" type="application/rss+xml"/><item><title>Rust Reversing 1: Hello, world!</title><link>https://brianstadnicki.github.io/posts/rust-reversing-01/</link><pubDate>Sun, 03 Oct 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://brianstadnicki.github.io/posts/rust-reversing-01/</guid><description><![CDATA[There&rsquo;s plenty of decompilers for most compiled languages, but what about rust? I couldn&rsquo;t find one, so let&rsquo;s try to understand what the resulting code looks like, in the hopes of creating a decompiler. Might help out somebody going against an odd malware author who&rsquo;s decided that rust makes sense (it doesn&rsquo;t).
Fair warning, this is my first dive into assembly reverse engineering since I did basic crackmes a few years ago, so be prepared for vagueness while I&rsquo;m trying to learn.]]></description></item></channel></rss>