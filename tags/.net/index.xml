<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>.NET on Brian Stadnicki</title><link>https://brianstadnicki.github.io/tags/.net/</link><description>Recent content in .NET on Brian Stadnicki</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 08 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://brianstadnicki.github.io/tags/.net/index.xml" rel="self" type="application/rss+xml"/><item><title>.NET dmp forensics challenge</title><link>https://brianstadnicki.github.io/posts/ctf-metactf-cybergames-2021-step-into-net/</link><pubDate>Wed, 08 Dec 2021 00:00:00 +0000</pubDate><guid>https://brianstadnicki.github.io/posts/ctf-metactf-cybergames-2021-step-into-net/</guid><description>This is a challenge from MetaCTF CyberGames 2021. It included .NET dump memory forensics, which doesn&amp;rsquo;t look to be very common knowledge on how to do, so hopefully this writeup can help with that.
Step into the NET For the grand finale, it&amp;rsquo;s time to put all of your analysis skills together. You&amp;rsquo;re going to face a little bit of Crypto &amp;amp; Reverse Engineering and a whole lot of Forensics.</description></item><item><title>Analysis of Kasperky Trial Reset V2</title><link>https://brianstadnicki.github.io/posts/malware-kaspersky-trial-reset-v2/</link><pubDate>Sun, 21 Nov 2021 00:00:00 +0000</pubDate><guid>https://brianstadnicki.github.io/posts/malware-kaspersky-trial-reset-v2/</guid><description>I&amp;rsquo;ve picked this sample from any.run. It appears to be a trojan tricking people who can&amp;rsquo;t afford Kasperky with a RAT, with the kasperky logo to match.
Property Value File Type Portable Executable 32 File Size 862.00 KB FileTitle Kasperky Trial Reset FileDescription Protected with AzeFuscator Extended FileVersion 1,0,0,0 ProductName Protectd with AzeFuscator Extended MD5 d56e6af4d2f9170cf312f110f3fa8511 SHA1 1e5be78908b38b9c6e7d6593888e355ee270a6c2 SHA256 aef7cef69eb5e31673d034239aff208061fa61e8b5c8355b933e14f5818e4433 Loader analysis The loader is very simple, just some misc methods along with a call to CreateProcessA, and the imports fopen, fwrite and fclose, which are used for writing the unpacked executable to the disk.</description></item><item><title>Modifying .NET embedded resources</title><link>https://brianstadnicki.github.io/posts/tips-net-resource-assemblies/</link><pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate><guid>https://brianstadnicki.github.io/posts/tips-net-resource-assemblies/</guid><description>When modifying a .NET program, you may notice that not all of the classes are actually there, but there might be some reference to Assembly.GetExecutingAssembly().GetManifestResourceStream(name) somewhere.
Source It&amp;rsquo;s likely that there are executables in the program&amp;rsquo;s resources. Using CFF Explorer&amp;rsquo;s Resource Editor, we can verify this.
+ Icons + Icon Groups + Version Info + Configuration Files - .NET Resources |- License.Validator |- Virtual.Machine.Checker Expected In my mind, the steps therefore needed, as the programs I actually want to modify are embedded, are the following:</description></item></channel></rss>