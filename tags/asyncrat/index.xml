<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>AsyncRAT - Tag - Brian Stadnicki</title><link>https://brianstadnicki.github.io/tags/asyncrat/</link><description>AsyncRAT - Tag - Brian Stadnicki</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 12 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://brianstadnicki.github.io/tags/asyncrat/" rel="self" type="application/rss+xml"/><item><title>AsyncRAT RCE vulnerability</title><link>https://brianstadnicki.github.io/posts/vulnerability-asyncrat-rce/</link><pubDate>Sat, 12 Mar 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://brianstadnicki.github.io/posts/vulnerability-asyncrat-rce/</guid><description>AsyncRAT is an open source RAT (Remote Access Tool). While it isn&amp;rsquo;t typically used for advanced attacks, it&amp;rsquo;s very common in gaming scenes, thanks to how easy to use and surprisingly polished it is. Thankfully, there exists a RCE flaw.
Attack surface The AsyncRAT server listens by default on 6606, 7707 and 8808. No authentication is required to connect to a server, with commands being sent over a tcp ssl socket connection, with a custom msgpack implementation and gzip stream compression.</description></item></channel></rss>