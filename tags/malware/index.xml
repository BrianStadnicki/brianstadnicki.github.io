<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>malware - Tag - Brian Stadnicki</title><link>https://brianstadnicki.github.io/tags/malware/</link><description>malware - Tag - Brian Stadnicki</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 19 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://brianstadnicki.github.io/tags/malware/" rel="self" type="application/rss+xml"/><item><title>Remcos RAT 3.4.0 protocol</title><link>https://brianstadnicki.github.io/posts/malware-remcos-rat-3.4.0-protocol/</link><pubDate>Sat, 19 Mar 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://brianstadnicki.github.io/posts/malware-remcos-rat-3.4.0-protocol/</guid><description>Remcos RAT is known for being very feature rich, with a lite version to test. They even provide an option to disable the TLS, making it very easy to reverse engineer the protocol. I&amp;rsquo;m not aware if the paid version has a different protocol.
The binary protocol is very simple:
packets start with $\x04\xff\x00 then is the packet type then 7 usually miscellaneous bytes then often string arguments separated by |\x1e\x1e\x1f| I&amp;rsquo;ve mapped out a significant amount of the protocol available in the lite version.</description></item><item><title>AsyncRAT RCE vulnerability</title><link>https://brianstadnicki.github.io/posts/vulnerability-asyncrat-rce/</link><pubDate>Sat, 12 Mar 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://brianstadnicki.github.io/posts/vulnerability-asyncrat-rce/</guid><description>AsyncRAT is an open source RAT (Remote Access Tool). While it isn&amp;rsquo;t typically used for advanced attacks, it&amp;rsquo;s very common in gaming scenes, thanks to how easy to use and surprisingly polished it is. Thankfully, there exists a RCE flaw.
Attack surface The AsyncRAT server listens by default on 6606, 7707 and 8808. No authentication is required to connect to a server, with commands being sent over a tcp ssl socket connection, with a custom msgpack implementation and gzip stream compression.</description></item><item><title>Chaos ransomware v4</title><link>https://brianstadnicki.github.io/posts/malware-chaos-ransomware-v4/</link><pubDate>Mon, 14 Feb 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://brianstadnicki.github.io/posts/malware-chaos-ransomware-v4/</guid><description>The chaos ransomware is fairly new, first appearing in June 2021 as a builder, offered on multiple darknet forums and marketplaces. It doesn&amp;rsquo;t appear to have been involved in any significant incidents yet, a few minecraft players don&amp;rsquo;t count. Unsurprisingly therefore, the sample has not had a single transaction to the wallet.
It isn&amp;rsquo;t very complicated, as likely a simple proof-of-concept ransomware. Simply a 32bit .NET executable, with the ransom wallpaper base64 encoded in and completely unobfuscated with names.</description></item><item><title>Fantom ransomware</title><link>https://brianstadnicki.github.io/posts/malware-fantom-ransomware/</link><pubDate>Wed, 09 Feb 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://brianstadnicki.github.io/posts/malware-fantom-ransomware/</guid><description>6 years ago, kaspersky reported a piece of ransomware which displayed a fake windows update screen during encryption.
I don&amp;rsquo;t know the distribution, but I know it starts at Fantom.exe. This appears to be an odd custom loader, but all the main functionality is implemented in the .NET executables.
There are 2 parts to the ransomware: the encryptor and the fake windows update screen.
Assemblies Encryptor This .NET assembly needs to first be dumped from the running ransomware process using ExtremeDumper, and then the criticalupdate01.</description></item><item><title>Overview of malware authors</title><link>https://brianstadnicki.github.io/posts/malware-authors/</link><pubDate>Fri, 21 Jan 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://brianstadnicki.github.io/posts/malware-authors/</guid><description>There is a huge amount of malware created and found every day, easily ranging from 1k to 3k every day just on a public resource such as malshare.
So there is a big question: Who and why is creating so much malware?
Types I believe there&amp;rsquo;s 2 main bands of malware authors: the kids, and the professionals.
Kids Kids can be taken both figuratively and literally. New &amp;ldquo;hackers&amp;rdquo; are often called Script Kiddies, referring to their main ability being to copy and paste public code and trying to use it, often failing badly.</description></item><item><title>Gitlab RCE Stealth Shellbot</title><link>https://brianstadnicki.github.io/posts/malware-gitlab-perlbot/</link><pubDate>Thu, 13 Jan 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://brianstadnicki.github.io/posts/malware-gitlab-perlbot/</guid><description>Last year, a major RCE was found in GitLab, CVE-2021-22205, where GitLab versions &amp;gt;= 11.9 and &amp;lt;13.10.3 were affected due to improper image validation before passing it to a file parser.
Malicious image The DjVu image is considered a legacy format, so not much attention has been paid to it. The GitLab RCE depends on a vulnerability in ExifTool, CVE-2021-22204, where improper parsing of annotations, including a dangerous eval to add quotes to a string, caused an RCE.</description></item><item><title>SBIDIOT IoT Malware: miner edition</title><link>https://brianstadnicki.github.io/posts/malware-sbidiot-dec2021/</link><pubDate>Sun, 02 Jan 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://brianstadnicki.github.io/posts/malware-sbidiot-dec2021/</guid><description><![CDATA[The SBIDIOT IoT malware was observed earlier this year in april. Recently I spotted a sample with a cryptominer added on, so let&rsquo;s see what&rsquo;s changed.
The botnet&rsquo;s main use is for DDOS attacks on game servers.
Overview Author I took a look at one of the past versions of this malware:
3e948a7995faac6975af3c8c937c66e6b5733cb69dab5d2b87ba4c22e23ef136 It appears that the author could be selfrepnetis, who&rsquo;s instagram is likely @selfrepnetis and @selfrepnetis_.
Based on the instagram, it appears that this botnet is likely being used for RebirthRebornV2, RebirthVPN, RebirthReboot1.]]></description></item><item><title>Face Brain: Password stealer with vm detection</title><link>https://brianstadnicki.github.io/posts/malware-face-brain-credential-stealer/</link><pubDate>Tue, 21 Dec 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://brianstadnicki.github.io/posts/malware-face-brain-credential-stealer/</guid><description>Today I&amp;rsquo;m taking a look at a password stealer filled with obfuscation and some virtual machine detection. The sample can be obtained from malshare, with an automated analysis report on joesandbox.
Property Value File Type Portable Executable 64 File Size 3.69 MB CompanyName Say celebrate Date FileDescription Dress Suffer fuel basic FileVersion 6.4.14.15 LegalCopyright Pine Shit (c) 2005 ProductName Almost publication MD5 3c7c6d236721ea4cef0f904ebde6f575 SHA1 d82cd631a49a175caace0fb209f7b9da16e29655 SHA256 ed107d31ac4a6e8f665986e3326cc2c4551fd00ba26f5414faa8edd0f7c20061 Initial overview The sandbox report provides us with a lot of useful initial information.</description></item><item><title>Embedded objects in OLE &amp; OLE2 using links</title><link>https://brianstadnicki.github.io/posts/malware-ole-ole2-embed-links/</link><pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://brianstadnicki.github.io/posts/malware-ole-ole2-embed-links/</guid><description>.docx and .doc documents can contain embedded objects through a variety of methods, here we look at a sample using OLE linking and embedding.
Sample obtained from any.run
Property Value File Type Rich Text Format File Size 8.00 KB FileTitle OriginalRTF.bak.rtf MD5 00f576ddeaf60756bfe671858434931c SHA1 44c0d585482755dd945cea10458b82ca6cb620ff SHA256 23c8f0fb9912538eee0bde49b2007e7e0f4efbd8bca69ddb9c05fafcee6f03ab Initial static analysis {\rt{\object\objemb\objw1\objh1{\*\objclass Package}{\*\objdata 01050000020000000800.</description></item><item><title>Docsend Payment Audistore phisher</title><link>https://brianstadnicki.github.io/posts/malware-docsend-payment-phisher-audi/</link><pubDate>Tue, 30 Nov 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://brianstadnicki.github.io/posts/malware-docsend-payment-phisher-audi/</guid><description><![CDATA[This phishing sample was delivered through docsend and relies on the user opening the downloaded html file and logging into microsoft. Sample collected from JOESandbox.
MD5: 7d6375abf1cff57c9d7da133cfaf0782
Loader &lt;!-- TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbn ... --&gt;&lt;script type=&#39;text/javascript&#39;&gt;document.write(&#39;\u003C\u0021\u002D\u002D\u0058\u0056\u005A\u0054\u0074\u006D...&#39;);&lt;/script&gt;&lt;!-- TgZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3R ... G1vZG8gdHlwaSwgcXVpIG51bmMgbm9iaXMgdmlkZW50dXIgcGFydW0gY2xhcmksIGZpYW50IHNvbGxlbW5lcyBpbiBmdXR1cnVtLg #### #### --&gt; There&rsquo;s a large comment full of likely random data to help evade detection, and a call to document.write, which writes text to the document stream.
Packed First of all, it appears the embedded html page was packed using Proteger HTML, and their license expires on Sun Dec 05 2021 01:29:00 GMT, that&rsquo;s in just 5 days of this post being published.]]></description></item></channel></rss>