<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>self-modifying - Tag - Brian Stadnicki</title><link>https://brianstadnicki.github.io/tags/self-modifying/</link><description>self-modifying - Tag - Brian Stadnicki</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 15 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://brianstadnicki.github.io/tags/self-modifying/" rel="self" type="application/rss+xml"/><item><title>Writing a self-modifying x86 factorial program</title><link>https://brianstadnicki.github.io/posts/asm-self-modifying-factorial/</link><pubDate>Wed, 15 Dec 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://brianstadnicki.github.io/posts/asm-self-modifying-factorial/</guid><description>Self-modifying programs seem to be viewed as something magical, but they&amp;rsquo;re quite simple.
To demonstrate this, I&amp;rsquo;ll be writing a self-modifying factorial program in x86, specifically in nasm.
Basic factorial To write a self-modifying factorial program, we first need a normal factorial program.
factorial: push ebp mov ebx, eax factorial_start: sub ebx, 1 cmp ebx, 0 je factorial_end mul ebx jmp factorial_start factorial_end: pop ebp ret This is quite simple, if it needs explanation then this isn&amp;rsquo;t for you.</description></item></channel></rss>