<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>rat - Tag - Brian Stadnicki</title><link>https://brianstadnicki.github.io/tags/rat/</link><description>rat - Tag - Brian Stadnicki</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 19 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://brianstadnicki.github.io/tags/rat/" rel="self" type="application/rss+xml"/><item><title>Remcos RAT 3.4.0 protocol</title><link>https://brianstadnicki.github.io/posts/malware-remcos-rat-3.4.0-protocol/</link><pubDate>Sat, 19 Mar 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://brianstadnicki.github.io/posts/malware-remcos-rat-3.4.0-protocol/</guid><description>Remcos RAT is known for being very feature rich, with a lite version to test. They even provide an option to disable the TLS, making it very easy to reverse engineer the protocol. I&amp;rsquo;m not aware if the paid version has a different protocol.
The binary protocol is very simple:
packets start with $\x04\xff\x00 then is the packet type then 7 usually miscellaneous bytes then often string arguments separated by |\x1e\x1e\x1f| I&amp;rsquo;ve mapped out a significant amount of the protocol available in the lite version.</description></item><item><title>AsyncRAT RCE vulnerability</title><link>https://brianstadnicki.github.io/posts/vulnerability-asyncrat-rce/</link><pubDate>Sat, 12 Mar 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://brianstadnicki.github.io/posts/vulnerability-asyncrat-rce/</guid><description>AsyncRAT is an open source RAT (Remote Access Tool). While it isn&amp;rsquo;t typically used for advanced attacks, it&amp;rsquo;s very common in gaming scenes, thanks to how easy to use and surprisingly polished it is. Thankfully, there exists a RCE flaw.
Attack surface The AsyncRAT server listens by default on 6606, 7707 and 8808. No authentication is required to connect to a server, with commands being sent over a tcp ssl socket connection, with a custom msgpack implementation and gzip stream compression.</description></item><item><title>Analysis of Kasperky Trial Reset V2</title><link>https://brianstadnicki.github.io/posts/malware-kaspersky-trial-reset-v2/</link><pubDate>Sun, 21 Nov 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://brianstadnicki.github.io/posts/malware-kaspersky-trial-reset-v2/</guid><description>I&amp;rsquo;ve picked this sample from any.run. It appears to be a trojan tricking people who can&amp;rsquo;t afford Kasperky with a RAT, with the kasperky logo to match.
Property Value File Type Portable Executable 32 File Size 862.00 KB FileTitle Kasperky Trial Reset FileDescription Protected with AzeFuscator Extended FileVersion 1,0,0,0 ProductName Protectd with AzeFuscator Extended MD5 d56e6af4d2f9170cf312f110f3fa8511 SHA1 1e5be78908b38b9c6e7d6593888e355ee270a6c2 SHA256 aef7cef69eb5e31673d034239aff208061fa61e8b5c8355b933e14f5818e4433 Loader analysis The loader is very simple, just some misc methods along with a call to CreateProcessA, and the imports fopen, fwrite and fclose, which are used for writing the unpacked executable to the disk.</description></item></channel></rss>