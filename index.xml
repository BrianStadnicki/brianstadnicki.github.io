<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Brian Stadnicki</title><link>https://brianstadnicki.github.io/</link><description>Recent content on Brian Stadnicki</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 08 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://brianstadnicki.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>.NET dmp forensics challenge</title><link>https://brianstadnicki.github.io/posts/ctf-metactf-cybergames-2021-step-into-net/</link><pubDate>Wed, 08 Dec 2021 00:00:00 +0000</pubDate><guid>https://brianstadnicki.github.io/posts/ctf-metactf-cybergames-2021-step-into-net/</guid><description>This is a challenge from MetaCTF CyberGames 2021. It included .NET dump memory forensics, which doesn&amp;rsquo;t look to be very common knowledge on how to do, so hopefully this writeup can help with that.
Step into the NET For the grand finale, it&amp;rsquo;s time to put all of your analysis skills together. You&amp;rsquo;re going to face a little bit of Crypto &amp;amp; Reverse Engineering and a whole lot of Forensics.</description></item><item><title>Success in MetaCTF CyberGames 2021</title><link>https://brianstadnicki.github.io/posts/ctf-metactf-cybergames-2021/</link><pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate><guid>https://brianstadnicki.github.io/posts/ctf-metactf-cybergames-2021/</guid><description>Me and my friend from school competed in a great CTF challenge this weekend. It ran from 03/12/21 8pm to 05/12/21 8pm, in which time we solved 32 challenges, gathering 6925 points. We came 41st in the students leaderboard and 96th overall, that&amp;rsquo;s very good for our first CTF.
I learnt a lot from this CTF, especially about what I don&amp;rsquo;t know yet.
As you can see, Reconnaissance and Forensics were our strongest categories.</description></item><item><title>Embedded objects in OLE &amp; OLE2 using links</title><link>https://brianstadnicki.github.io/posts/malware-ole-ole2-embed-links/</link><pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate><guid>https://brianstadnicki.github.io/posts/malware-ole-ole2-embed-links/</guid><description>.docx and .doc documents can contain embedded objects through a variety of methods, here we look at a sample using OLE linking and embedding.
Sample obtained from any.run
Property Value File Type Rich Text Format File Size 8.00 KB FileTitle OriginalRTF.bak.rtf MD5 00f576ddeaf60756bfe671858434931c SHA1 44c0d585482755dd945cea10458b82ca6cb620ff SHA256 23c8f0fb9912538eee0bde49b2007e7e0f4efbd8bca69ddb9c05fafcee6f03ab Initial static analysis {\rt{\object\objemb\objw1\objh1{\*\objclass Package}{\*\objdata 01050000020000000800.</description></item><item><title>Docsend Payment Audistore phisher</title><link>https://brianstadnicki.github.io/posts/malware-docsend-payment-phisher-audi/</link><pubDate>Tue, 30 Nov 2021 00:00:00 +0000</pubDate><guid>https://brianstadnicki.github.io/posts/malware-docsend-payment-phisher-audi/</guid><description>This phishing sample was delivered through docsend and relies on the user opening the downloaded html file and logging into microsoft. Sample collected from JOESandbox.
MD5: 7d6375abf1cff57c9d7da133cfaf0782
Loader &amp;lt;!-- TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbn ... --&amp;gt;&amp;lt;script type=&amp;#39;text/javascript&amp;#39;&amp;gt;document.write(&amp;#39;\u003C\u0021\u002D\u002D\u0058\u0056\u005A\u0054\u0074\u006D...&amp;#39;);&amp;lt;/script&amp;gt;&amp;lt;!-- TgZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3R ... G1vZG8gdHlwaSwgcXVpIG51bmMgbm9iaXMgdmlkZW50dXIgcGFydW0gY2xhcmksIGZpYW50IHNvbGxlbW5lcyBpbiBmdXR1cnVtLg ### ### --&amp;gt; There&amp;rsquo;s a large comment full of likely random data to help evade detection, and a call to document.write, which writes text to the document stream.
Packed First of all, it appears the embedded html page was packed using Proteger HTML, and their license expires on Sun Dec 05 2021 01:29:00 GMT, that&amp;rsquo;s in just 5 days of this post being published.</description></item><item><title>HTB forensics challenge: oBfsC4t10n #93</title><link>https://brianstadnicki.github.io/posts/htb-challenge-93/</link><pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate><guid>https://brianstadnicki.github.io/posts/htb-challenge-93/</guid><description>Introduction I started analysing this from finding it on the malware sandbox any.run, only at the end do I notice that it&amp;rsquo;s a Hack The Box challenge.
Sample This sample is from any.run.
Property Value File Type Microsoft Excel 97-2003 Worksheet File Size 35.6 KB MD5 b54c993e941836bf2c9c69948b30bcf0 SHA1 a3e6234b5310a3918b9e01c08badf3eb5f44a4b8 SHA256 3861795ece849d6b417a3c9870a7e0a0eccd27f74e706b9242d94d5e8885b705 VBA Extraction Using olevba, we can view the vba code inside.</description></item><item><title>Analysis of Kasperky Trial Reset V2</title><link>https://brianstadnicki.github.io/posts/malware-kaspersky-trial-reset-v2/</link><pubDate>Sun, 21 Nov 2021 00:00:00 +0000</pubDate><guid>https://brianstadnicki.github.io/posts/malware-kaspersky-trial-reset-v2/</guid><description>I&amp;rsquo;ve picked this sample from any.run. It appears to be a trojan tricking people who can&amp;rsquo;t afford Kasperky with a RAT, with the kasperky logo to match.
Property Value File Type Portable Executable 32 File Size 862.00 KB FileTitle Kasperky Trial Reset FileDescription Protected with AzeFuscator Extended FileVersion 1,0,0,0 ProductName Protectd with AzeFuscator Extended MD5 d56e6af4d2f9170cf312f110f3fa8511 SHA1 1e5be78908b38b9c6e7d6593888e355ee270a6c2 SHA256 aef7cef69eb5e31673d034239aff208061fa61e8b5c8355b933e14f5818e4433 Loader analysis The loader is very simple, just some misc methods along with a call to CreateProcessA, and the imports fopen, fwrite and fclose, which are used for writing the unpacked executable to the disk.</description></item><item><title>Modifying .NET embedded resources</title><link>https://brianstadnicki.github.io/posts/tips-net-resource-assemblies/</link><pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate><guid>https://brianstadnicki.github.io/posts/tips-net-resource-assemblies/</guid><description>When modifying a .NET program, you may notice that not all of the classes are actually there, but there might be some reference to Assembly.GetExecutingAssembly().GetManifestResourceStream(name) somewhere.
Source It&amp;rsquo;s likely that there are executables in the program&amp;rsquo;s resources. Using CFF Explorer&amp;rsquo;s Resource Editor, we can verify this.
+ Icons + Icon Groups + Version Info + Configuration Files - .NET Resources |- License.Validator |- Virtual.Machine.Checker Expected In my mind, the steps therefore needed, as the programs I actually want to modify are embedded, are the following:</description></item><item><title>Cracking rendariaka's packedcrackmev1.0</title><link>https://brianstadnicki.github.io/posts/crackmes-rendariaka-packedcrackmev1-0/</link><pubDate>Thu, 11 Nov 2021 00:00:00 +0000</pubDate><guid>https://brianstadnicki.github.io/posts/crackmes-rendariaka-packedcrackmev1-0/</guid><description>This crackme is packed unlike the previous ones. We&amp;rsquo;ll be unpacking it manually as an exercise. The crackme is rendariaka&amp;rsquo;s packedcrackmev1.0
Property Value Language C/C++ Platform Windows Difficulty 2.0 Quality 4.0 Arch x86 First run Enter serial number: Entering the incorrect serial causes it to exit.
Initial static analysis As by the name suggests, this crackme is packed.</description></item><item><title>Analysis of vzlom_vk (Failed)</title><link>https://brianstadnicki.github.io/posts/malware-vzlom-vk/</link><pubDate>Tue, 09 Nov 2021 00:00:00 +0000</pubDate><guid>https://brianstadnicki.github.io/posts/malware-vzlom-vk/</guid><description>Malware obtained from any.run. It&amp;rsquo;s an unknown executable which unpacks itself, fails to run update.exe and prints out some russian.
Property Value MD5 18b065e37c55a00d7a023f5cef02bde4 SHA1 fb6e6596c617f932cd9c7740b29ed6f5dda8a88c SHA256 bc4896abbf0726df8b9ef9134d584bbe1b649f59e453bbc327f8cd5b5b5a0651 File Type Portable Executable 32 File Info Microsoft Visual C++ 8 First run When run, it prints out the following text:</description></item><item><title>Cracking Marquire's CrackMe_V4_Marquire</title><link>https://brianstadnicki.github.io/posts/crackmes-marquier-crackme-v4-marquire/</link><pubDate>Sun, 07 Nov 2021 00:00:00 +0000</pubDate><guid>https://brianstadnicki.github.io/posts/crackmes-marquier-crackme-v4-marquire/</guid><description>This crackme will be a bit more difficult than the last one: Marquire&amp;rsquo;s CrackMe_V4_Marquire
Property Value Language C/C++ Platform Windows Difficulty 2.7 Quality 4.0 Arch x86 Initial run ## The goal of this crackme is to find the key! ## Enter the key : Asks for a key, exits if it&amp;rsquo;s false, and gives a message if it&amp;rsquo;s correct.</description></item><item><title>Analysis of Skylanders Giants PC game</title><link>https://brianstadnicki.github.io/posts/malware-skylanders-giants-pc/</link><pubDate>Sat, 06 Nov 2021 00:00:00 +0000</pubDate><guid>https://brianstadnicki.github.io/posts/malware-skylanders-giants-pc/</guid><description>When I was a kid, I played Skylanders: Giants, it was probably my favourite game growing up.
It was released for the following platforms:
Nintendo 3DS PlayStation 3 Wii Wii U Xbox 360 As much as I&amp;rsquo;d like to believe that the game was ported to PC, it&amp;rsquo;s way more likely that this is malware, especially given how SEO-optimized it is and the list in the blog archive.</description></item><item><title>Analysis of FreeBitco.in Next Roll Prediction</title><link>https://brianstadnicki.github.io/posts/malware-freebitcoin-next-roll-prediction/</link><pubDate>Fri, 05 Nov 2021 00:00:00 +0000</pubDate><guid>https://brianstadnicki.github.io/posts/malware-freebitcoin-next-roll-prediction/</guid><description>Malware obtained from any.run. It&amp;rsquo;s a bitcoin scam executable.
Property Value MD5 afb30fed336e9b1e5e8ea5d941691b2a SHA1 afeb330ea75da11608bc4f32d3490ed38cfd4c11 SHA256 16b4664969ce27b9914dc9d41b5baa16a341e00f442527efffd478a73a014fa1 2 EXEs dropped Running procmon when running the malware shows that 2 possibly interesting executables are created: C:\Users\IEUser\AppData\Roaming\Microsoft\gons.exe and C:\Users\IEUser\AppData\Roaming\Microsoft\temp5789e.exe. Both of these dropped executables are .NET assemblies, so they should be trivial to reverse.
gons.exe Opening gons in dnSpy shows that this executable is responsible for the GUI, and I didn&amp;rsquo;t notice any malicious behaviour initially.</description></item><item><title>Cracking Marquire's CrackMe_V3_Marquire</title><link>https://brianstadnicki.github.io/posts/crackmes-marquier-crackme-v3-marquire/</link><pubDate>Sun, 24 Oct 2021 00:00:00 +0000</pubDate><guid>https://brianstadnicki.github.io/posts/crackmes-marquier-crackme-v3-marquire/</guid><description>Let&amp;rsquo;s start off the crackmes series with a basic one: Marquire&amp;rsquo;s CrackMe_V3_Marquire .
Property Value Language C/C++ Platform Windows Difficulty 1.3 Quality 4.3 Arch x86 Initial run It&amp;rsquo;s very standard, it just asks for the key and tells us if it&amp;rsquo;s right or wrong.
Initial analysis It&amp;rsquo;s quite clear what&amp;rsquo;s going on.</description></item><item><title>My startup: Tradesmen Bookings</title><link>https://brianstadnicki.github.io/posts/tradesmen-bookings-begin/</link><pubDate>Fri, 08 Oct 2021 00:00:00 +0000</pubDate><guid>https://brianstadnicki.github.io/posts/tradesmen-bookings-begin/</guid><description>A project I started 4 months ago is tradesmen bookings. Property management services currently manage their tradesmen through calling, which is expensive, so I decided to write a SaaS tool that would optimise this. No calling, just post a job and the tradesmen apply.
Development It&amp;rsquo;s written in ruby on rails, which was honestly quite painful to get started on. I&amp;rsquo;m not typically involved in web development, so it was quite a giant learning curve, felt like the learning curve of Eve.</description></item><item><title>Rust Reversing 1: Hello, world!</title><link>https://brianstadnicki.github.io/posts/rust-reversing-01/</link><pubDate>Sun, 03 Oct 2021 00:00:00 +0000</pubDate><guid>https://brianstadnicki.github.io/posts/rust-reversing-01/</guid><description>There&amp;rsquo;s plenty of decompilers for most compiled languages, but what about rust? I couldn&amp;rsquo;t find one, so let&amp;rsquo;s try to understand what the resulting code looks like, in the hopes of creating a decompiler. Might help out somebody going against an odd malware author who&amp;rsquo;s decided that rust makes sense (it doesn&amp;rsquo;t).
Fair warning, this is my first dive into assembly reverse engineering since I did basic crackmes a few years ago, so be prepared for vagueness while I&amp;rsquo;m trying to learn.</description></item><item><title>About</title><link>https://brianstadnicki.github.io/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brianstadnicki.github.io/about/</guid><description>I&amp;rsquo;m a hobbyist developer, reverse engineer and malware analyst.</description></item><item><title>Contact</title><link>https://brianstadnicki.github.io/contact/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brianstadnicki.github.io/contact/</guid><description>Email me</description></item><item><title>Quips</title><link>https://brianstadnicki.github.io/quips/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://brianstadnicki.github.io/quips/</guid><description>A random collection of quips I&amp;rsquo;ve picked up, sorry about no attributions.
all progress depends on the unreasonable man if the rate of change on the outside exceeds the rate of change on the inside, the end is near we might compare promerger economists to paid prostitutes, but that would be grossly unfair to prostitutes my favorite key is the delete key Never attribute to malice that which can be adequately explained by stupidity Don&amp;rsquo;t ask people questions that they are going to answer one way 95% or more of the time, or for which they haven&amp;rsquo;t the context to answer I didn&amp;rsquo;t have time to write you a simple UI, so I wrote you a complicated one instead Communication with spoken language is a valuable part of the job.</description></item></channel></rss>